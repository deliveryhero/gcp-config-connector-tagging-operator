// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	resourcemanagerpb "cloud.google.com/go/resourcemanager/apiv3/resourcemanagerpb"
)

// TagsManager is an autogenerated mock type for the TagsManager type
type TagsManager struct {
	mock.Mock
}

// CreateKey provides a mock function with given fields: ctx, projectID, key
func (_m *TagsManager) CreateKey(ctx context.Context, projectID string, key string) (*resourcemanagerpb.TagKey, error) {
	ret := _m.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 *resourcemanagerpb.TagKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)); ok {
		return rf(ctx, projectID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *resourcemanagerpb.TagKey); ok {
		r0 = rf(ctx, projectID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateValue provides a mock function with given fields: ctx, projectID, key, value
func (_m *TagsManager) CreateValue(ctx context.Context, projectID string, key string, value string) (*resourcemanagerpb.TagValue, error) {
	ret := _m.Called(ctx, projectID, key, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateValue")
	}

	var r0 *resourcemanagerpb.TagValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)); ok {
		return rf(ctx, projectID, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *resourcemanagerpb.TagValue); ok {
		r0 = rf(ctx, projectID, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupKey provides a mock function with given fields: ctx, projectID, key
func (_m *TagsManager) LookupKey(ctx context.Context, projectID string, key string) (*resourcemanagerpb.TagKey, error) {
	ret := _m.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for LookupKey")
	}

	var r0 *resourcemanagerpb.TagKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)); ok {
		return rf(ctx, projectID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *resourcemanagerpb.TagKey); ok {
		r0 = rf(ctx, projectID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupValue provides a mock function with given fields: ctx, projectID, key, value
func (_m *TagsManager) LookupValue(ctx context.Context, projectID string, key string, value string) (*resourcemanagerpb.TagValue, error) {
	ret := _m.Called(ctx, projectID, key, value)

	if len(ret) == 0 {
		panic("no return value specified for LookupValue")
	}

	var r0 *resourcemanagerpb.TagValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)); ok {
		return rf(ctx, projectID, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *resourcemanagerpb.TagValue); ok {
		r0 = rf(ctx, projectID, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTagsManager creates a new instance of TagsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagsManager {
	mock := &TagsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
