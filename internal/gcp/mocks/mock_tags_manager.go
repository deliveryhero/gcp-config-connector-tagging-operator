// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	resourcemanagerpb "cloud.google.com/go/resourcemanager/apiv3/resourcemanagerpb"
)

// TagsManager is an autogenerated mock type for the TagsManager type
type TagsManager struct {
	mock.Mock
}

type TagsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TagsManager) EXPECT() *TagsManager_Expecter {
	return &TagsManager_Expecter{mock: &_m.Mock}
}

// CreateKey provides a mock function with given fields: ctx, projectID, key
func (_m *TagsManager) CreateKey(ctx context.Context, projectID string, key string) (*resourcemanagerpb.TagKey, error) {
	ret := _m.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 *resourcemanagerpb.TagKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)); ok {
		return rf(ctx, projectID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *resourcemanagerpb.TagKey); ok {
		r0 = rf(ctx, projectID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsManager_CreateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKey'
type TagsManager_CreateKey_Call struct {
	*mock.Call
}

// CreateKey is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - key string
func (_e *TagsManager_Expecter) CreateKey(ctx interface{}, projectID interface{}, key interface{}) *TagsManager_CreateKey_Call {
	return &TagsManager_CreateKey_Call{Call: _e.mock.On("CreateKey", ctx, projectID, key)}
}

func (_c *TagsManager_CreateKey_Call) Run(run func(ctx context.Context, projectID string, key string)) *TagsManager_CreateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TagsManager_CreateKey_Call) Return(_a0 *resourcemanagerpb.TagKey, _a1 error) *TagsManager_CreateKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagsManager_CreateKey_Call) RunAndReturn(run func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)) *TagsManager_CreateKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateValue provides a mock function with given fields: ctx, projectID, key, value
func (_m *TagsManager) CreateValue(ctx context.Context, projectID string, key string, value string) (*resourcemanagerpb.TagValue, error) {
	ret := _m.Called(ctx, projectID, key, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateValue")
	}

	var r0 *resourcemanagerpb.TagValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)); ok {
		return rf(ctx, projectID, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *resourcemanagerpb.TagValue); ok {
		r0 = rf(ctx, projectID, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsManager_CreateValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateValue'
type TagsManager_CreateValue_Call struct {
	*mock.Call
}

// CreateValue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - key string
//   - value string
func (_e *TagsManager_Expecter) CreateValue(ctx interface{}, projectID interface{}, key interface{}, value interface{}) *TagsManager_CreateValue_Call {
	return &TagsManager_CreateValue_Call{Call: _e.mock.On("CreateValue", ctx, projectID, key, value)}
}

func (_c *TagsManager_CreateValue_Call) Run(run func(ctx context.Context, projectID string, key string, value string)) *TagsManager_CreateValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TagsManager_CreateValue_Call) Return(_a0 *resourcemanagerpb.TagValue, _a1 error) *TagsManager_CreateValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagsManager_CreateValue_Call) RunAndReturn(run func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)) *TagsManager_CreateValue_Call {
	_c.Call.Return(run)
	return _c
}

// LookupKey provides a mock function with given fields: ctx, projectID, key
func (_m *TagsManager) LookupKey(ctx context.Context, projectID string, key string) (*resourcemanagerpb.TagKey, error) {
	ret := _m.Called(ctx, projectID, key)

	if len(ret) == 0 {
		panic("no return value specified for LookupKey")
	}

	var r0 *resourcemanagerpb.TagKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)); ok {
		return rf(ctx, projectID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *resourcemanagerpb.TagKey); ok {
		r0 = rf(ctx, projectID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsManager_LookupKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupKey'
type TagsManager_LookupKey_Call struct {
	*mock.Call
}

// LookupKey is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - key string
func (_e *TagsManager_Expecter) LookupKey(ctx interface{}, projectID interface{}, key interface{}) *TagsManager_LookupKey_Call {
	return &TagsManager_LookupKey_Call{Call: _e.mock.On("LookupKey", ctx, projectID, key)}
}

func (_c *TagsManager_LookupKey_Call) Run(run func(ctx context.Context, projectID string, key string)) *TagsManager_LookupKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TagsManager_LookupKey_Call) Return(_a0 *resourcemanagerpb.TagKey, _a1 error) *TagsManager_LookupKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagsManager_LookupKey_Call) RunAndReturn(run func(context.Context, string, string) (*resourcemanagerpb.TagKey, error)) *TagsManager_LookupKey_Call {
	_c.Call.Return(run)
	return _c
}

// LookupValue provides a mock function with given fields: ctx, projectID, key, value
func (_m *TagsManager) LookupValue(ctx context.Context, projectID string, key string, value string) (*resourcemanagerpb.TagValue, error) {
	ret := _m.Called(ctx, projectID, key, value)

	if len(ret) == 0 {
		panic("no return value specified for LookupValue")
	}

	var r0 *resourcemanagerpb.TagValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)); ok {
		return rf(ctx, projectID, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *resourcemanagerpb.TagValue); ok {
		r0 = rf(ctx, projectID, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanagerpb.TagValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagsManager_LookupValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupValue'
type TagsManager_LookupValue_Call struct {
	*mock.Call
}

// LookupValue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - key string
//   - value string
func (_e *TagsManager_Expecter) LookupValue(ctx interface{}, projectID interface{}, key interface{}, value interface{}) *TagsManager_LookupValue_Call {
	return &TagsManager_LookupValue_Call{Call: _e.mock.On("LookupValue", ctx, projectID, key, value)}
}

func (_c *TagsManager_LookupValue_Call) Run(run func(ctx context.Context, projectID string, key string, value string)) *TagsManager_LookupValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TagsManager_LookupValue_Call) Return(_a0 *resourcemanagerpb.TagValue, _a1 error) *TagsManager_LookupValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagsManager_LookupValue_Call) RunAndReturn(run func(context.Context, string, string, string) (*resourcemanagerpb.TagValue, error)) *TagsManager_LookupValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewTagsManager creates a new instance of TagsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagsManager {
	mock := &TagsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
