name: Build And Deploy GCP CC Tagging Operator

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: gcp-config-connector-tagging-operator

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: "1.22"
  #         cache: true
  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: v1.60.3
  #         args: --timeout 600s --verbose ./...

  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.23"
          cache: true
      - name: Test
        run: make test

  release:
    name: Release Package to GHCR
    needs: [Test] #lint should be placed back
    runs-on: ubuntu-latest
    # Sets the permissions granted to the default `GITHUB_TOKEN` for the actions in this job. This is autogenerated
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Create a semantic-release configuration file dynamically
      - name: Install dependencies
        run: npm install @semantic-release/exec --save-dev

      # Create a semantic-release configuration file dynamica and not pushing change log to master
      - name: Create semantic-release config
        run: |
          echo '{
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/github",
              [
                "@semantic-release/exec",
                {
                  "publishCmd": "echo ::set-output name=new_version::${nextRelease.version}"
                }
              ]
            ]
          }' > .releaserc.json

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          # Use the version from semantic-release as the tag
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate Artifact Attestation
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: helmify
        if: steps.semantic.outputs.new_release_published == 'true'
        run: IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }} make helm

      - name: Chart | Push
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: appany/helm-oci-chart-releaser@v0.3.0
        with:
          name: ${{ env.APP_NAME }}
          repository: ${{ github.repository }}/helm-chart
          tag: ${{ steps.semantic.outputs.new_release_version }}
          path: helm-chart/${{ env.APP_NAME }}
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.repository_owner }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
