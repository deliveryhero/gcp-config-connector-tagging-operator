name: Build Test And Deploy GCP CC Tagging Operator

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: gcp-config-connector-tagging-operator
  E2EPROJECTID: dp-cap-co-dev-e2e-8520
  E2EPROJECTNUMBER: 379706009135

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: "1.22"
  #         cache: true
  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: v1.60.3
  #         args: --timeout 600s --verbose ./...

  test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Run Unit and Integration Test
        run: make verify test

      - name: Auth to GCP project using WIF for E2E tests
        if: github.repository == github.event.pull_request.head.repo.full_name
        uses: "google-github-actions/auth@8254fb75a33b976a221574d287e93919e6a36f70"
        with:
          project_id: ${{ env.E2EPROJECTID }}
          workload_identity_provider: "projects/${{ env.E2EPROJECTNUMBER }}/locations/global/workloadIdentityPools/gh-gcp-config-connector-tagging-/providers/gh-gcp-config-connector-tagging-"
          service_account: "wif-gcp-config-connector-taggi@${{ env.E2EPROJECTID }}.iam.gserviceaccount.com"

      ## -------- Uncomment below lines for testing the access using WIF --------
      # - name: "Set up Cloud SDK"
      #   if: github.repository == github.event.pull_request.head.repo.full_name
      #   uses: "google-github-actions/setup-gcloud@f0990588f1e5b5af6827153b93673613abdc6ec7"
      #   with:
      #     version: ">= 363.0.0"
      # - name: "Use gcloud CLI"
      #   if: github.repository == github.event.pull_request.head.repo.full_name
      #   run: |
      #     gcloud resource-manager tags bindings list --parent=//storage.googleapis.com/projects/_/buckets/XXX --location=us

      - name: Create Kind Cluster for E2E Test
        if: github.repository == github.event.pull_request.head.repo.full_name
        uses: helm/kind-action@0025e74a8c7512023d06dc019c617aa3cf561fde
        with:
          cluster_name: "kind"

      - name: Run E2E Test
        if: github.repository == github.event.pull_request.head.repo.full_name
        run: |
          kubectl cluster-info
          make test-e2e

      - name: Run Codacy Analysis
        if: github.repository == github.event.pull_request.head.repo.full_name
        uses: codacy/codacy-analysis-cli-action@97bf5df3c09e75f5bcd72695998f96ebd701846e
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: Run codacy-coverage-reporter
        if: github.repository == github.event.pull_request.head.repo.full_name
        uses: codacy/codacy-coverage-reporter-action@89d6c85cfafaec52c72b6c5e8b2878d33104c699
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: cover.out
          force-coverage-parser: go

  release:
    name: Release Package to GHCR
    needs: [test]
    runs-on: ubuntu-latest
    # Sets the permissions granted to the default `GITHUB_TOKEN` for the actions in this job. This is autogenerated
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        id: push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: .
          push: true
          # Use the version from semantic-release as the tag
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate Artifact Attestation
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: helmify
        if: steps.semantic.outputs.new_release_published == 'true'
        run: IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.semantic.outputs.new_release_version }} make helm

      - name: Update both 'version' and 'appVersion' in Chart.yaml
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: mikefarah/yq@master
        with:
          expression: '.version = "${{ steps.semantic.outputs.new_release_version }}", .appVersion = "${{ steps.semantic.outputs.new_release_version }}"'
          inplace: true
          files: ${{ github.repository }}/helm-chart/gcp-config-connector-tagging-operator/Chart.yaml

      - name: Chart | Push
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: appany/helm-oci-chart-releaser@v0.3.0
        with:
          name: ${{ env.APP_NAME }}
          repository: ${{ github.repository }}/helm-chart
          tag: ${{ steps.semantic.outputs.new_release_version }}
          path: helm-chart/${{ env.APP_NAME }}
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.repository_owner }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
